# A two line pluggable and themable theme.
#
# Author:
#   shura <shura1991@gmail.com>
#
# Features:
#   - Two lines.
#   - All the VCS informations (default).
#   - Pluggable.
#   - Themable.
#
# Settings (:zoppo:prompt:borra):
#   - plugins:    list of plugins (array)
#   - prefix:     right-side of plugin wrapper (string)
#   - separator:  plugin separator (string)
#   - suffix:     left-side of plugin wrapper (string)
#   - top:        beginning of first line (string)
#   - bottom:     beginning of second line (string)
#   - prompt:     right-side of second line (string)
#   - rprompt:    right prompt enable or disable (bool)
#
# Plugins settings (:zoppo:prompt:borra:plugin:$plugin):
#   vcs:
#     - enable: vcs enable backends (array)
#     - format: vcs backends format (string):
#       - %b: backend name (to write a bold-end, escape it using %%b)
#       - %i: formatted text according to zstyle ':vcs_info:*' formats (or actionformats)
#
#   userhost:
#     - format: username and hostname format (string):
#       - %u: username
#       - %h: hostname
#
#   date:
#     - format: the format passed to date
#
# Example:
#   zstyle ':zoppo:prompt:borra' separator ' '

function prompt_borra_setup {
  autoload -Uz add-zsh-hook
  autoload -Uz vcs_info
  prompt_opts=(cr percent subst)

  add-zsh-hook precmd prompt_borra_precmd

  # setup the passed theme
  (( $+1 )) && "prompt:borra:theme:$1"

  zdefault ':vcs_info:*' check-for-changes 'true'
  zdefault ':vcs_info:*' unstagedstr ' %F{yellow}⚑%f'
  zdefault ':vcs_info:*' stagedstr ' %F{green}⚑%f'
  zdefault ':vcs_info:*' actionformats '%b%u%c [%a]'
  zdefault ':vcs_info:*' formats '%b%u%c'
  zdefault ':vcs_info:*+set-message:*' hooks 'git-st'

  prompt_borra_precmd
}

function prompt_borra_precmd {
  PROMPT="$(prompt:borra:create-prompt)"
  zstyle -s ':zoppo:prompt:borra' rprompt RPROMPT
}

function prompt:borra:wrap-plugin {
  local prefix
  local suffix

  zdefault -s ':zoppo:prompt:borra' prefix prefix '['
  zdefault -s ':zoppo:prompt:borra' suffix suffix ']'

  print -n -- "$2$prefix$1$suffix"
}

function prompt:borra:render:item {
  local res

  res="$($1 "$2" 2>/dev/null)"
  case "$?" in
    0) prompt:borra:wrap-plugin "$res" "$2" ;;
    23) print -n "$res" ;;
    *) return 1 ;;
  esac
}

function prompt:borra:render:plugins {
  local res=""
  local plugin
  local plugins
  local sep

  zstyle -a ':zoppo:prompt:borra' plugins plugins

  for plugin in ${plugins[*]}; do
    res+="$(prompt:borra:render:item "+borra-$plugin" "$sep")"
    [ -z "$sep" -a ! -z "$res" ] && zdefault -s ':zoppo:prompt:borra' separator sep ' '
  done

  print -n "${res}"
}

function prompt:borra:create-prompt {
  local plugins="$(prompt:borra:render:plugins)"
  local res=""
  local top
  local bottom
  local prompt

  if [ ! -z "$plugins" ]; then
    zdefault -s ':zoppo:prompt:borra' top top ''
    zdefault -s ':zoppo:prompt:borra' bottom bottom ''

    res="${top}${plugins}\n${bottom}"
  fi

  zdefault -s ':zoppo:prompt:borra' prompt prompt '[%~]> '

  print -n "${res}${prompt}"
}

function prompt_borra_preview {
  (
    local ctx
    local -a tmp
    if (( $# > 0 )); then
      zstyle -g tmp
      for ctx ("$tmp[@]"); do
        if [[ "$ctx" == :zoppo:prompt:borra:* || "$ctx" == :zoppo:prompt:borra ]]; then
          zstyle -d "$ctx"
        fi
      done
      prompt_preview_theme 'borra' "$@"
    else
      zstyle -g tmp
      for ctx ("$tmp[@]"); do
        if [[ "$ctx" == :zoppo:prompt:borra:* || "$ctx" == :zoppo:prompt:borra ]]; then
          zstyle -d "$ctx"
        fi
      done
      prompt_preview_theme 'borra'
      print
      zstyle -g tmp
      for ctx ("$tmp[@]"); do
        if [[ "$ctx" == :zoppo:prompt:borra:* || "$ctx" == :zoppo:prompt:borra ]]; then
          zstyle -d "$ctx"
        fi
      done
      prompt_preview_theme 'borra' 'bluesky'
      print
      zstyle -g tmp
      for ctx ("$tmp[@]"); do
        if [[ "$ctx" == :zoppo:prompt:borra:* || "$ctx" == :zoppo:prompt:borra ]]; then
          zstyle -d "$ctx"
        fi
      done
      prompt_preview_theme 'borra' 'darkblood'
    fi
  )
}

# Plugins {{{
function +borra-return {
  print -n -- '%(?..'"$(prompt:borra:wrap-plugin "%?" "$1")"')'
  return 23
}

function +borra-userhost {
  local fmt
  local res

  zdefault -s ':zoppo:prompt:borra:plugin:userhost' format fmt '%u@%h'
  zformat -f res "$fmt" u:'%(!.%Sroot%s.%n)' U:'%(!.%SROOT%s.%n)' h:'%m'
  print -n "$res"
}

function +borra-pts {
  print -n '/dev/%y'
}

function +borra-date {
  local fmt

  zdefault -s ':zoppo:prompt:borra:plugin:date' format fmt '%H:%M:%S'
  date +"$fmt" | tr -d "\n"
}

function +borra-ruby-info {
  (( $+functions[ruby:info] )) || return 1
  local fmt
  zdefault -s ':zoppo:prompt:borra:plugin:ruby-info' format fmt '%e-%v-p%p (%P)'
  ruby:info "$fmt"
}

function +vi-git-st {
  if [[ -n $(git ls-files --other --exclude-standard 2> /dev/null) ]]; then
    hook_com[unstaged]=' %F{red}⚑%f'
  fi
}

function +borra-vcs-info {
  local res=""
  local sep="$1"
  local backend
  local enabled
  local fmt
  local s

  vcs_info # need VCS_INFO_backends
  zdefault -a ':zoppo:prompt:borra:plugin:vcs' enable enabled "${VCS_INFO_backends[@]}"
  zdefault -s ':zoppo:prompt:borra:plugin:vcs' format fmt '%b: %i'

  for backend in ${VCS_INFO_backends[@]}; do
    [ "${enabled[(I)$backend]}" = 0 ] && continue
    zstyle ':vcs_info:*' enable "$backend"
    vcs_info || continue
    [ -z "${vcs_info_msg_0_}" ] && continue

    zformat -f s "$fmt" b:"$backend" i:"$vcs_info_msg_0_"

    res+="$(prompt:borra:wrap-plugin "$s" "$sep")"

    [ -z "$sep" -a ! -z "$res" ] && zdefault -s ':zoppo:prompt:borra' separator sep ' '
  done

  print -n -- "$res"
  return 23
}
# }}}

# Themes {{{
function prompt:borra:theme:bluesky {
  zdefault ':zoppo:prompt:borra' plugins 'userhost' 'pts' 'ruby-info' 'vcs-info'

  zstyle ':zoppo:prompt:borra' prefix '%F{blue}(%f'
  zstyle ':zoppo:prompt:borra' suffix '%F{blue})%f'
  zstyle ':zoppo:prompt:borra' separator '%F{blue}-%f'
  zstyle ':zoppo:prompt:borra' top '%F{blue}╭-%f'
  zstyle ':zoppo:prompt:borra' bottom '%F{blue}╰─%f'
  zstyle ':zoppo:prompt:borra' prompt '%F{blue}(%f%B%$((COLUMNS / 2))<...<%~%<<%b%F{blue})%F{yellow}>%f '
  zstyle ':zoppo:prompt:borra' rprompt '%(?..%F{red}%? ↵%f)'

  zstyle ':zoppo:prompt:borra:plugin:userhost' format '%U%F{blue}@%f%h'
  zstyle ':zoppo:prompt:borra:plugin:ruby-info' format '%e-%v-p%p%F{blue}|%f%P'
  zstyle ':zoppo:prompt:borra:plugin:vcs' format '%b%F{blue}|%f%i'
}

function prompt:borra:theme:darkblood {
  zdefault ':zoppo:prompt:borra' plugins 'userhost' 'pts' 'vcs-info' 'return'

  zstyle ':zoppo:prompt:borra' prefix '%F{red}[%F{white}%B'
  zstyle ':zoppo:prompt:borra' suffix '%b%F{red}]%f'
  zstyle ':zoppo:prompt:borra' separator ' '
  zstyle ':zoppo:prompt:borra' top '%F{red}┌%F{red}'
  zstyle ':zoppo:prompt:borra' bottom '%F{red}└%F{red}'
  zstyle ':zoppo:prompt:borra' prompt '%F{red}[%F{white}%B%$((COLUMNS / 2))<...<%~%<<%b%F{red}]>%f '

  zstyle ':zoppo:prompt:borra:plugin:vcs' format '%b%%b%F{red}|%B%F{white}%i'
  zstyle ':zoppo:prompt:borra:plugin:userhost' format '%F{white}%B%u%b%F{red}@%F{white}%B%h%b'
}
# }}}

prompt_borra_setup "$@"

# vim: ft=zsh sts=2 ts=2 sw=2 et fdm=marker fmr={{{,}}}
